@using Data
@using Components
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.WebUtilities
@using System.Net.Http.Headers
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService
@inject HttpClient Httpclient

@page "/search"

<div class="container">

    <RadzenTemplateForm Data=@item>
        <div class="container-fluid">
            <RadzenFieldset Text="Pindex Search">
                <div class="row">
                    <div class="col">
                        <RadzenLabel Text="Candidate / Organization Name" />
                        <RadzenTextBox @bind-Value="@canorgs" style="width: 100%;" Name="Canorgs"/>
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Office" />
                        <RadzenTextBox @bind-Value="@offices" style="width: 100%;" Name="Offices" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Party" />
                        <RadzenTextBox @bind-Value="@parties" style="width: 100%;" Name="Parties" />
                    </div>
                </div>
                <div class="row">

                    <div class="col">
                        <RadzenLabel Text="Location" />
                        <RadzenTextBox @bind-Value="@locations" style="width: 100%;" Name="Locations" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Year" />
                        <RadzenTextBox @bind-Value="@years" style="width: 100%;" Name="Years" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Election Type" />
                        <RadzenTextBox @bind-Value="@elections" style="width: 100%;" Name="ElectionTypes" />
                    </div>
                </div>
                <div class="row">

                    <div class="col">
                        <RadzenLabel Text="Categorizations" />
                        <RadzenTextBox @bind-Value="@categorizations" style="width: 100%;" Name="Categorizations" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Issues" />
                        <RadzenTextBox @bind-Value="@issues" style="width: 100%;" Name="Issues" />
                        
                    </div>

                    <div class="col-2 align-items-center">
                        <RadzenButton Click=@(args => SearchItems()) Text="Search" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(args => ClearSearchInput()) Text="Clear" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(args => ShowAddDialog()) Text="Add New Pin" ButtonStyle="ButtonStyle.Primary" />


                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </RadzenTemplateForm>
    


    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@items" TItem="Item">
        <Template Context="item">
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 420px">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                    <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(File.ReadAllBytes(item.imageUrl))}")" Style="width: 100px; height: 100px; border-radius: 50%;" />
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Candidates / Organizations</RadzenText>
                        @foreach (Canorg canorg in item.Canorgs) {
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(canorg.Name)</b></RadzenText>
                        }
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Offices</RadzenText>
                        @foreach (Office office in item.Offices) {
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(office.Name)</b></RadzenText>
                        }
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard class="rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem calc(-1 * var(--rz-card-padding));">
                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-primary-light"><strong>Election Information</strong></RadzenText>
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="4">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Location</RadzenText>
                            @foreach (Location location in item.Locations) {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(location?.Name)</b></RadzenText>
                            }
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Party</RadzenText>
                            @foreach (Party party in item.Parties) {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(party?.Name)</b></RadzenText>
                            }
                        </RadzenColumn>
                        <RadzenColumn SizeSM="4">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Year</RadzenText>
                            @if (String.IsNullOrEmpty(item.ElectionYear)) {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@("Unknown")</b></RadzenText>
                            } else {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(item?.ElectionYear)</b></RadzenText>
                            }
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Election Type</RadzenText>
                            @if (String.IsNullOrEmpty(item.ElectionYear)) {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@("Unknown")</b></RadzenText>
                            } else {
                                <RadzenText TextStyle="TextStyle.Body1"><b>@(item?.ElectionType)</b></RadzenText>
                            }
                        </RadzenColumn>
                        <RadzenColumn SizeSM="4">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Quantity</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(item?.Quantity)</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Won</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(item.Won ? "Yes" : "No")</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="count" PageSize="@pageSize" PageNumbersCount="5"/>
    <RadzenDialog>
    </RadzenDialog>

    @if (getItemsError)
    {
        <p>Unable to get items.</p>
    }
</div>

@code {
    private string canorgs;
    private string offices;
    private string parties;
    private string locations;
    private string years;
    private string elections;
    private string categorizations;
    private string issues;

    private string submitCanorgs;
    private string submitOffices;
    private string submitParties;
    private string submitLocations;
    private string submitCategorizations;
    private string submitIssues;

    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 9;
    int count;
    IEnumerable<Item> items;

    private bool dialogVisible;

    Item item = new Item();

    bool? won = null;

    private void OnClick() {    

    }

    private bool getItemsError;

    //IEnumerable<Item> items = Array.Empty<Item>();


    private async Task SearchItems() {

        var request = new HttpRequestMessage(HttpMethod.Get, BuildUriFromSearchParams());
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode) {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            items = await JsonSerializer.DeserializeAsync<IEnumerable<Item>>(responseStream);
            count = items.Count();
        } else {
            getItemsError = true;
        }
    }

    private Uri BuildUriFromSearchParams() {

        string baseUri = "https://localhost:7003/api/item";

        var queryParams = new Dictionary<string, string>();

        if (!string.IsNullOrEmpty(canorgs)) {
            queryParams.Add("candidates", canorgs);
        }
        if (!string.IsNullOrEmpty(offices)) {
            queryParams.Add("offices", offices);
        }
        if (!string.IsNullOrEmpty(parties)) {
            queryParams.Add("parties", parties);
        }
        if (!string.IsNullOrEmpty(locations)) {
            queryParams.Add("locations", locations);
        }
        if (!string.IsNullOrEmpty(years)) {
            queryParams.Add("years", years);
        }
        if (!string.IsNullOrEmpty(elections)) {
            queryParams.Add("elections", elections);
        }
        if (!string.IsNullOrEmpty(categorizations)) {
            queryParams.Add("categorizations", categorizations);
        }
        if (!string.IsNullOrEmpty(issues)) {
            queryParams.Add("issues", issues);
        }

        return new Uri(QueryHelpers.AddQueryString(baseUri, queryParams));
    }

    private void ClearSearchInput() {

    }

    async Task ShowAddDialog() {
        var result = await DialogService.OpenAsync("Submit New Item", ds =>
    @<div>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <RadzenLabel Text="Candidates & Organizations" />
                    <RadzenTextBox @bind-Value="@submitCanorgs" Name="submitCanorgs" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Offices" />
                    <RadzenTextBox @bind-Value="@submitOffices" Name="submitOffices" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <RadzenLabel Text="Locations" />
                    <RadzenTextBox @bind-Value="@submitLocations" Name="submitLocations" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Parties" />
                    <RadzenTextBox @bind-Value="@submitParties" Name="submitParties" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <RadzenLabel Text="Election Year" />
                    <RadzenNumeric ShowUpDown="false" @bind-Value="@item.ElectionYear" Name="submitYear" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Election Type" />
                    <RadzenTextBox  @bind-Value="@item.ElectionType" Name="submitElectionType" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Won" />
                    <RadzenSwitch @bind-Value="@item.Won" Name="submitWon" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <RadzenLabel Text="Categorizations" />
                    <RadzenTextBox @bind-Value="@submitCategorizations" Name="submitCategorizations" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Issues" />
                    <RadzenTextBox @bind-Value="@submitIssues" Name="submitIssues" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <RadzenLabel Text="Quantity" />
                    <RadzenNumeric ShowUpDown="false" @bind-Value="@item.Quantity" Name="submitQuantity" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Storage Location" />
                    <RadzenTextBox @bind-Value="@item.StorageLocation" Name="submitStorageLocation" />
                </div>
                <div class="col">
                    <RadzenLabel Text="Notes" />
                    <RadzenTextBox @bind-Value="@item.Notes" Name="submitNotes" />
                </div>
                <div class="col">            
                    <RadzenLabel Text="File Upload" />
                    <InputFile OnChange="OnInputFileChange"></InputFile>
                    <RadzenButton Click=@(args => OnInputFileSubmit()) Icon="check" ButtonStyle="ButtonStyle.Primary" />
                </div>
            </div>
        </div>    
        <RadzenButton Click=@(args => SubmitItem()) Text="Submit" ButtonStyle="ButtonStyle.Primary" />
        </div>
    , new DialogOptions());
    }

    private void OnInputFileChange(InputFileChangeEventArgs args) {

        item.imageFile = args.File;
    }

    private async Task OnInputFileSubmit() {

        MultipartFormDataContent data = new MultipartFormDataContent();
        data.Add(new StreamContent(item.imageFile.OpenReadStream()), "imageFile", item.imageFile.Name);

        using(HttpClient client = new HttpClient()) {

            var response = await client.PostAsync("https://localhost:7003/api/item/images", data);
            if (response.IsSuccessStatusCode) {

                using var responseStream = await response.Content.ReadAsStreamAsync();
                ImageUploadResponse responseItem = await JsonSerializer.DeserializeAsync<ImageUploadResponse>(responseStream);
                item.imageUrl = responseItem.imageUrl;
            }
        }
    }

    public class UploadResult {
        public bool Uploaded { get; set; }
        public string? FileName { get; set; }
        public string? StoredFileName { get; set; }
        public int ErrorCode { get; set; }
    }


    private async void SubmitItem() {

        HandleNestedData();

        var json = JsonSerializer.Serialize(item);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var formData = new MultipartFormDataContent();
        formData.Add(new StreamContent(item.imageFile.OpenReadStream()), "imageFile", item.imageFile.Name);

        using(HttpClient client = new HttpClient()) {
            var response = await client.PostAsync("https://localhost:7003/api/item", content);

            if (response.IsSuccessStatusCode) {
     
                item = new Item();
            }
        }
    }


    private void HandleNestedData() {

        if (!String.IsNullOrWhiteSpace(submitCanorgs)) {
            foreach (string subCanorg in submitCanorgs.Split(',')) {
                Canorg canorg = new Canorg(subCanorg);
                item.Canorgs.Add(canorg);
            }
        }

        if (!String.IsNullOrWhiteSpace(submitOffices)) {

            foreach (string subOffice in submitOffices.Split(',')) {
                Office office = new Office(subOffice);
                item.Offices.Add(office);
            }
        }

        if (!String.IsNullOrWhiteSpace(submitLocations)) {
            foreach (string subLocation in submitLocations.Split(',')) {
                Location location = new Location(subLocation);
                item.Locations.Add(location);
            }
        }

        if (!String.IsNullOrWhiteSpace(submitParties)) {
            foreach(string subParty in submitParties.Split(',')) {
            Party party = new Party(subParty);
            item.Parties.Add(party);
        }
        }

        if (!String.IsNullOrWhiteSpace(submitCategorizations)) {
            foreach (string subCategory in submitCategorizations.Split(',')) {
                Categorization category = new Categorization(subCategory);
                item.Categorizations.Add(category);
            }
        }

        if (!String.IsNullOrWhiteSpace(submitIssues)) {
            foreach (string subIssue in submitIssues.Split(',')) {
                Issue issue = new Issue(subIssue);
                item.Issues.Add(issue);
            }
        }

    }

}