@using Data
@using Components
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.WebUtilities
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService

@page "/search"

<div class="container">

    <RadzenTemplateForm Data=@item>
        <div class="container-fluid">
            <RadzenFieldset Text="Pindex Search">
                <div class="row">
                    <div class="col">
                        <RadzenLabel Text="Candidate / Organization Name" />
                        <RadzenTextBox @bind-Value="@canorgs" style="width: 100%;" Name="Canorgs"/>
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Office" />
                        <RadzenTextBox @bind-Value="@offices" style="width: 100%;" Name="Offices" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Party" />
                        <RadzenTextBox @bind-Value="@parties" style="width: 100%;" Name="Parties" />
                    </div>
                </div>
                <div class="row">

                    <div class="col">
                        <RadzenLabel Text="Location" />
                        <RadzenTextBox @bind-Value="@locations" style="width: 100%;" Name="Locations" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Year" />
                        <RadzenTextBox @bind-Value="@years" style="width: 100%;" Name="Years" />
                    </div>
                    <div class="col">
                        <RadzenLabel Text="Election Type" />
                        <RadzenTextBox @bind-Value="@elections" style="width: 100%;" Name="ElectionTypes" />
                    </div>
                </div>
                <div class="row">

                    <div class="col-md-5">
                        <RadzenLabel Text="Categorizations" />
                        <RadzenTextBox @bind-Value="@categorizations" style="width: 100%;" Name="Categorizations" />
                    </div>
                    <div class="col-md-5">
                        <RadzenLabel Text="Issues" />
                        <RadzenTextBox @bind-Value="@issues" style="width: 100%;" Name="Issues" />
                        
                    </div>
                    <div class="col-2 align-items-center">
                        <RadzenButton Click=@(args => SearchItems()) Text="Search" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(args => ClearSearchInput()) Text="Clear" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(args => ShowAddDialog()) Text="Add New Pin" ButtonStyle="ButtonStyle.Primary" />


                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </RadzenTemplateForm>
    
    <RadzenDataList AllowVirtualization=false Data="@items" TItem="Item" PageSize="10" ShowPagingSummary=true>
        <Template Context="item">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                    <RadzenImage></RadzenImage>
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline">Election</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@item.ElectionType</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline">Date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@item.ElectionYear</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline">Location</RadzenText>
                        @foreach (var location in @item.Locations) {
                            <RadzenText TextStyle="TextStyle.Body1"><b>@location.Name</b></RadzenText>
                        }
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard>
                    <RadzenRow>
                        <RadzenColumn>
                            @foreach (var canorg in @item.Canorgs) {
                                <RadzenText TextStyle="TextStyle.Overline">Candidate</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@canorg.Name</b></RadzenText>
                            }
                        </RadzenColumn>
                        <RadzenColumn>
                            @foreach (var office in @item.Offices) {
                                <RadzenText TextStyle="TextStyle.Overline">Office</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@office.Name</b></RadzenText>
                            }
                        </RadzenColumn>
                        <RadzenColumn>
                            @foreach (var party in @item.Parties) {
                                <RadzenText TextStyle="TextStyle.Overline">Party</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@party.Name</b></RadzenText>
                            }
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenCard>
        </Template>
    </RadzenDataList>

    <RadzenDialog>
    </RadzenDialog>

    @if (getItemsError)
    {
        <p>Unable to get items.</p>
    }
</div>

@code {
    private string canorgs;
    private string offices;
    private string parties;
    private string locations;
    private string years;
    private string elections;
    private string categorizations;
    private string issues;

    private string submitCanorgs;
    private string submitOffices;
    private string submitParties;
    private string submitLocations;
    private string submitYear;
    private string submitQuantity;
    private bool submitWon;
    private string submitElectionType;
    private string submitStorageLocation;
    private string submitNotes;
    private string submitCategorizations;
    private string submitIssues;

    private bool dialogVisible;

    Item item = new Item();
    bool? won = null;

    private void OnClick() {    

    }

    private bool getItemsError;

    IEnumerable<Item> items = Array.Empty<Item>();


    private async Task SearchItems() {

        var request = new HttpRequestMessage(HttpMethod.Get, BuildUriFromSearchParams());
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode) {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            items = await JsonSerializer.DeserializeAsync<IEnumerable<Item>>(responseStream);
        } else {
            getItemsError = true;
        }
    }
    
    private Uri BuildUriFromSearchParams() {

        string baseUri = "https://localhost:7003/api/item";

        var queryParams = new Dictionary<string, string>();

        if (!string.IsNullOrEmpty(canorgs)) {
            queryParams.Add("candidates", canorgs);
        }
        if (!string.IsNullOrEmpty(offices)) {
            queryParams.Add("offices", offices);
        }
        if (!string.IsNullOrEmpty(parties)) {
            queryParams.Add("parties", parties);
        }
        if (!string.IsNullOrEmpty(locations)) {
            queryParams.Add("locations", locations);
        }
        if (!string.IsNullOrEmpty(years)) {
            queryParams.Add("years", years);
        }
        if (!string.IsNullOrEmpty(elections)) {
            queryParams.Add("elections", elections);
        }
        if (!string.IsNullOrEmpty(categorizations)) {
            queryParams.Add("categorizations", categorizations);
        }
        if (!string.IsNullOrEmpty(issues)) {
            queryParams.Add("issues", issues);
        }

        return new Uri(QueryHelpers.AddQueryString(baseUri, queryParams));
    }

    private void ClearSearchInput() {
        
    }

    async Task ShowAddDialog() {
        var result = await DialogService.OpenAsync("Submit New Item", ds =>
    @<div>
        <RadzenTemplateForm Data=@item>
            <div class="container-fluid">
                    <div class="row">
                        <div class="col">
                            <RadzenLabel Text="Candidate / Organization Names (comma delimited)" />
                            <RadzenTextBox @bind-Value="@submitCanorgs" style="width: 100%;" Name="submitCanorgs" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <RadzenLabel Text="Offices (comma delimited)" />
                        <RadzenTextBox @bind-Value="@submitOffices" style="width: 100%;" Name="submitOffices" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <RadzenLabel Text="Locations (comma delimited)" />
                        <RadzenTextBox @bind-Value="@submitLocations" style="width: 100%;" Name="submitLocations" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <RadzenLabel Text="Parties (comma delimited)" />
                        <RadzenTextBox @bind-Value="@submitParties" style="width: 100%;" Name="submitParties" />
                        </div>
                        <div class="col">
                            <RadzenLabel Text="Election Type" />
                        <RadzenTextBox @bind-Value="@submitElectionType" style="width: 100%;" Name="submitElectionType" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <RadzenLabel Text="Year" />
                        <RadzenTextBox @bind-Value="@submitYear" style="width: 100%;" Name="submitYear" />
                        </div>
                        <div class="col">
                            <RadzenLabel Text="Quantity" />
                        <RadzenTextBox @bind-Value="@submitQuantity" style="width: 100%;" Name="submitQuantity" />
                        </div>
                        <div class="col">
                            <RadzenLabel Text="Won" />
                        <RadzenCheckBox @bind-Value="@submitWon" style="width: 100%;" Name="submitWon" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col">
                            <RadzenLabel Text="Storage Location" />
                        <RadzenTextBox @bind-Value="@submitStorageLocation" style="width: 100%;" Name="submitStorageLocation" />
                        </div>
                        <div class="col">
                            <RadzenLabel Text="Notes" />
                        <RadzenTextBox @bind-Value="@submitNotes" style="width: 100%;" Name="submitNotes" />
                        </div>

                    </div>
                    <div class="row">

                        <div class="col-md-5">
                            <RadzenLabel Text="Categorizations" />
                        <RadzenTextBox @bind-Value="@submitCategorizations" style="width: 100%;" Name="submitCategorizations" />
                        </div>
                        <div class="col-md-5">
                            <RadzenLabel Text="Issues" />
                        <RadzenTextBox @bind-Value="@submitIssues" style="width: 100%;" Name="submitIssues" />
                        </div>
                        <div class="col-2 align-items-center">
                            <RadzenButton Click=@(args => SubmitItem(ds)) Text="Submit" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click=@(args => ds.Close(false)) Text="Clear" ButtonStyle="ButtonStyle.Primary" />
                        </div>
                    </div>
            </div>
        </RadzenTemplateForm>
        </div>
    );
        Console.WriteLine($"Dialog result: {result}");
    }

    private async Task SubmitItem(DialogService ds) {

        Item item = new Item();

        foreach(string canorgSubStr in submitCanorgs.Split(",")) {

            Canorg newCanorg = new Canorg
            {
                Name = canorgSubStr,
            };
            item.Canorgs.Add(newCanorg);
        }

        foreach (string officeSubStr in submitOffices.Split(",")) {

            Office newOffice = new Office {
                    Name = officeSubStr,
                };
            item.Offices.Add(newOffice);
        }

        foreach (string partySubStr in submitParties.Split(",")) {

            Party newParty = new Party{
                    Name = partySubStr,
                };
            item.Parties.Add(newParty);
        }

        foreach (string locationSubStr in submitLocations.Split(",")) {

            Location newLocation = new Location {
                    Name = locationSubStr,
                };
            item.Locations.Add(newLocation);
        }

        foreach (string catagorizationSubStr in submitCategorizations.Split(",")) {

            Categorization newCategorization = new Categorization {
                    Name = catagorizationSubStr,
                };
            item.Categorizations.Add(newCategorization);
        }

        foreach (string issueSubStr in submitIssues.Split(",")) {

            Issue newIssue = new Issue {
                    Name = issueSubStr,
                };
            item.Issues.Add(newIssue);
        }

        item.ElectionYear = submitYear;
        item.Quantity = int.Parse(submitQuantity);
        item.Won = submitWon;
        item.ElectionType = submitElectionType;
        item.StorageLocation = submitStorageLocation;
        item.Notes = submitNotes;

        using (var submitClient = new HttpClient()) {

            submitClient.BaseAddress = new Uri("https://localhost:7003/api/item");
            string test = JsonSerializer.Serialize(item);
            var content = new StringContent(test, Encoding.UTF8, "application/json");
            var response = await submitClient.PostAsync("Item", content);

            if (response.IsSuccessStatusCode){

                ClearSubmitInput();
                ds.Close(false);

            } else {
                await DialogService.OpenAsync("Submit New Item", ds =>
                    @<div>
                        ERROR
                    </div>
                    );
            }
        }
    }

    private void ClearSubmitInput() {
        
    }

}